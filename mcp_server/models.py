# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:05:38+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Adds(RootModel[int]):
    root: int


class Blob(RootModel[str]):
    root: str


class ContentType(Enum):
    application_json = 'application/json'
    application_xml = 'application/xml'


class Cursor(RootModel[str]):
    root: str


class Deletes(RootModel[int]):
    root: int


class Double(RootModel[float]):
    root: float


class Expr(RootModel[str]):
    root: str


class Facet(RootModel[str]):
    root: str


class FilterQuery(RootModel[str]):
    root: str


class Highlight(RootModel[str]):
    root: str


class Long(RootModel[int]):
    root: int


class Partial(RootModel[bool]):
    root: bool


class Query(RootModel[str]):
    root: str


class QueryOptions(RootModel[str]):
    root: str


class QueryParser(Enum):
    simple = 'simple'
    structured = 'structured'
    lucene = 'lucene'
    dismax = 'dismax'


class Return(RootModel[str]):
    root: str


class SearchRequest(BaseModel):
    pass


class Size(RootModel[int]):
    root: int


class Sort(RootModel[str]):
    root: str


class Start(RootModel[int]):
    root: int


class Stat(RootModel[str]):
    root: str


class String(RootModel[str]):
    root: str


class SuggestRequest(BaseModel):
    pass


class SuggestStatus(BaseModel):
    rid: Optional[String] = None
    timems: Optional[Long] = None


class Suggester(RootModel[str]):
    root: str


class SuggestionMatch(BaseModel):
    id: Optional[String] = None
    score: Optional[Long] = None
    suggestion: Optional[String] = None


class Suggestions(RootModel[List[SuggestionMatch]]):
    root: List[SuggestionMatch]


class SuggestionsSize(RootModel[int]):
    root: int


class UploadDocumentsRequest(BaseModel):
    documents: Blob


class Format(Enum):
    sdk = 'sdk'


class Field20130101DocumentsBatchFormatSdkContentTypePostRequest(BaseModel):
    documents: str = Field(
        ..., description='A batch of documents formatted in JSON or HTML.'
    )


class QParser(Enum):
    simple = 'simple'
    structured = 'structured'
    lucene = 'lucene'
    dismax = 'dismax'


class Pretty(Enum):
    true = 'true'


class Bucket(BaseModel):
    count: Optional[Long] = None
    value: Optional[String] = None


class BucketList(RootModel[List[Bucket]]):
    root: List[Bucket]


class DocumentServiceException(BaseModel):
    message: Optional[String] = None
    status: Optional[String] = None


class DocumentServiceWarning(BaseModel):
    message: Optional[String] = None


class DocumentServiceWarnings(RootModel[List[DocumentServiceWarning]]):
    root: List[DocumentServiceWarning]


class Exprs(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class FieldStats(BaseModel):
    count: Optional[Long] = None
    max: Optional[String] = None
    mean: Optional[String] = None
    min: Optional[String] = None
    missing: Optional[Long] = None
    stddev: Optional[Double] = None
    sum: Optional[Double] = None
    sumOfSquares: Optional[Double] = None


class FieldValue(RootModel[List[String]]):
    root: List[String]


class Fields(RootModel[Optional[Dict[str, FieldValue]]]):
    root: Optional[Dict[str, FieldValue]] = None


class Highlights(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class Hit(BaseModel):
    exprs: Optional[Exprs] = None
    fields: Optional[Fields] = None
    highlights: Optional[Highlights] = None
    id: Optional[String] = None


class HitList(RootModel[List[Hit]]):
    root: List[Hit]


class Hits(BaseModel):
    cursor: Optional[String] = None
    found: Optional[Long] = None
    hit: Optional[HitList] = None
    start: Optional[Long] = None


class SearchException(BaseModel):
    message: Optional[String] = None


class SearchStatus(BaseModel):
    rid: Optional[String] = None
    timems: Optional[Long] = None


class Stats(RootModel[Optional[Dict[str, FieldStats]]]):
    root: Optional[Dict[str, FieldStats]] = None


class SuggestModel(BaseModel):
    found: Optional[Long] = None
    query: Optional[String] = None
    suggestions: Optional[Suggestions] = None


class SuggestResponse(BaseModel):
    status: Optional[SuggestStatus] = None
    suggest: Optional[SuggestModel] = None


class UploadDocumentsResponse(BaseModel):
    adds: Optional[Adds] = None
    deletes: Optional[Deletes] = None
    status: Optional[String] = None
    warnings: Optional[DocumentServiceWarnings] = None


class BucketInfo(BaseModel):
    buckets: Optional[BucketList] = None


class Facets(RootModel[Optional[Dict[str, BucketInfo]]]):
    root: Optional[Dict[str, BucketInfo]] = None


class SearchResponse(BaseModel):
    facets: Optional[Facets] = None
    hits: Optional[Hits] = None
    stats: Optional[Stats] = None
    status: Optional[SearchStatus] = None
